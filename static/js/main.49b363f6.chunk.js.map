{"version":3,"sources":["serviceWorker.js","component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","component/ErrorBoundry.js","component/CounterButton.js","component/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","component_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","console","log","color","onClick","PureComponent","Header","nextProps","nextState","component_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","component_Header","component_SearchBox","component_Scroll","component_ErrorBoundry","component_CardList","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCHSC,EAbJ,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GAClB,OAEAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,cACrBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCiBLS,EAtBC,SAAAX,GAAa,IAAXY,EAAWZ,EAAXY,OAId,OACIR,EAAAC,EAAAC,cAAA,WACGM,EAAOC,IAAI,SAACC,EAAKC,GACf,OACCX,EAAAC,EAAAC,cAACU,EAAD,CACIC,IAAKF,EACLZ,GAAIS,EAAOG,GAAGZ,GACdF,KAAMW,EAAOG,GAAGd,KAChBC,MAAOU,EAAOG,GAAGb,YCEpBgB,EAhBG,SAAAlB,GAAiCA,EAA/BmB,YAA+B,IAAlBC,EAAkBpB,EAAlBoB,aAE7B,OACGhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,SACIC,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCPI,SATD,SAACC,GACX,OACIrB,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAmBC,OAAO,UAC5DJ,EAAMK,YCkBJC,cApBX,SAAAA,EAAYN,GAAM,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KACDc,MAAO,CACRC,UAAS,GAHCR,iFAOAS,EAAOC,GACnBP,KAAKQ,SAAS,CAACH,UAAS,qCAG5B,OAAGL,KAAKI,MAAMC,SAENpC,EAAAC,EAAAC,cAAA,uCAGD6B,KAAKV,MAAMK,gBAjBGc,qBC6BZC,cA5BX,SAAAA,IAAa,IAAAb,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACXb,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,QAcFW,YAAc,WACVd,EAAKW,SAAS,SAAAJ,GACV,MAAO,CAACQ,MAAMf,EAAKO,MAAMQ,MAAQ,MAfvCf,EAAKO,MAAQ,CACTQ,MAAM,GAHCf,wEAuBT,OADAgB,QAAQC,IAAI,iBACJ7C,EAAAC,EAAAC,cAAA,UAAQ4C,MAAOf,KAAKV,MAAMyB,MAAOC,QAAShB,KAAKW,aAA/C,UAAoEX,KAAKI,MAAMQ,cAxBnEK,iBCgBbC,gMAdWC,EAAUC,GAC5B,OAAO,mCAIT,OADEP,QAAQC,IAAI,UAEV7C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACkD,EAAD,CAAeN,MAAO,gBATXN,aCsBfa,8LAGAtB,KAAKV,MAAMiC,mDAIL,IAAAC,EAEqDxB,KAAKV,MAAvDmC,EAFHD,EAEGC,YAAaC,EAFhBF,EAEgBE,eAAgBjD,EAFhC+C,EAEgC/C,OAAQkD,EAFxCH,EAEwCG,UACtCC,EAAiBnD,EAAOoD,OAAO,SAAAC,GACjC,OAAOA,EAAMhE,KAAKiE,cAAcC,SAASP,EAAYM,iBAEzD,OAAGJ,EACQ1D,EAAAC,EAAAC,cAAA,qBAGHF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAC8D,EAAD,MACAhE,EAAAC,EAAAC,cAAC+D,EAAD,CAAWjD,aAAcyC,IACzBzD,EAAAC,EAAAC,cAACgE,EAAD,KACElE,EAAAC,EAAAC,cAACiE,EAAD,KACEnE,EAAAC,EAAAC,cAACkE,EAAD,CAAU5D,OAAQmD,cAtBtBU,IAAM7B,WAiCT8B,cA/CS,SAAAnC,GACpB,MAAM,CACFqB,YAAYrB,EAAMoC,aAAaf,YAC/BE,UAAUvB,EAAMqC,cAAcd,UAC9BlD,OAAO2B,EAAMqC,cAAchE,OAC3B6B,MAAMF,EAAMqC,cAAcnC,QAGP,SAACoC,GACxB,MAAO,CACAhB,eAAe,SAACiB,GAAD,OAAUD,ECfK,CACrCxD,KCP6B,sBDQ7B0D,QDawDD,EAAME,OAAOC,SAC9DvB,gBAAgB,kBAAMmB,ECXC,SAACA,GAE/BA,EAAS,CAACxD,KCXwB,2BDYlC6D,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAGT,EAAS,CAACxD,KCbU,yBDamB0D,QAAQO,MAC3DC,MAAM,SAAA9C,GAAK,OAAIoC,EAAS,CAACxD,KCbM,wBDasB0D,QAAQtC,WDyCnDiC,CAA6CjB,kCGpDtD+B,EAAoB,CACtB5B,YAAY,IAaV6B,EAAoB,CACtB3B,WAAU,EACVlD,OAAO,GACP6B,MAAM,ICTJiD,EAASC,yBACTC,EAAcC,YAAgB,CAAClB,aDLT,WAAuC,IAAtCpC,EAAsCuD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhCN,EAAoBS,EAAYH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAL,GAC1D,OAAOG,EAAO5E,MACV,IDZyB,sBCatB,OAAOY,OAAOiE,OAAO,GAAI3D,EAAM,CAACqB,YAAYqC,EAAOlB,UAErD,QACI,OAAOxC,ICD+BqC,cDUtB,WAA0C,IAAxCrC,EAAwCuD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhCL,EAAoBQ,EAAYH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAL,GAC9D,OAAQG,EAAO5E,MACX,IDzB8B,yBC0BzB,OAAQY,OAAOiE,OAAO,GAAI3D,EAAM,CAACuB,WAAU,IAChD,ID1B6B,yBC2BxB,OAAQ7B,OAAOiE,OAAO,GAAI3D,EAAM,CAACuB,WAAU,EAAOlD,OAAOqF,EAAOlB,UACrE,ID3B4B,wBC4BvB,OAAQ9C,OAAOiE,OAAO,GAAI3D,EAAM,CAACuB,WAAU,EAAOrB,MAAMwD,EAAOlB,UACpE,QACK,OAAOxC,MClBd4D,EAAQC,YAAYR,EAAaS,YAAgBC,IAAgBZ,IAGvEa,IAASC,OACJpG,EAAAC,EAAAC,cAACmG,EAAA,EAAD,CAAUN,MAAOA,GACd/F,EAAAC,EAAAC,cAAEoG,EAAF,OAEFC,SAASC,eAAe,SZ0GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.49b363f6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card=({name, email, id}) =>{\n        return (\n  \n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from  'react';\nimport Card from   './Card'\n\n\nconst CardList =({robots}) =>{\n    //if(true){\n    //    throw new Error(' Noooooo ');\n   // } \n    return (\n        <div>\n          {robots.map((user,i)=>{\n             return (\n              <Card \n                  key={i} \n                  id={robots[i].id} \n                  name={robots[i].name} \n                  email={robots[i].email}\n              /> \n              );\n             }\n            )\n        }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n\n    return (\n       <div className='tc'>\n        <input\n            className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='Search Robots'\n            onChange={searchChange}/>\n\n\n       </div> \n\n    )\n}\n\nexport default SearchBox;","import React from  'react';\n\nconst Scroll =(props) =>{\n    return(\n        <div style={{overflow:'scroll', border:'5px solid black', height:'500px'}}>\n            {props.children}\n        </div>\n\n    );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props);\n        this.state ={\n            hasError:false\n        }\n    }\n\n    componentDidCatch(error, info){\n          this.setState({hasError:true});\n    }\n    render(){\n      if(this.state.hasError){\n          return (\n              <h1> Oooops. That is not good</h1>\n          );\n      }\n      return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, {PureComponent} from 'react';\n\nclass CounterButton extends PureComponent{\n    constructor(){\n      super();\n      this.state = {\n          count:0\n      }\n    }\n    //Mudar de PureComponent para Component para usar a função abaixo\n    // shouldComponentUpdate(nextProps, nextState){\n    //     if(nextState.count !== this.state.count){\n    //        return true;\n    //     }\n    //       return false;\n        \n    // }\n\n    updateCount = () =>{\n        this.setState(state =>{\n            return {count:this.state.count + 1}\n                   });\n    }\n\n    render(){\n        console.log('CounterButton');\n        return (<button color={this.props.color} onClick={this.updateCount}> Count:{this.state.count}</button>);\n    }\n\n}\n\nexport default CounterButton;","import React, { Component} from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component{\n    shouldComponentUpdate(nextProps,nextState){\n        return true;\n    }\n    render(){\n        console.log(\"Header\");\n      return (          \n          <div>\n          <h1 className='f1'>RoboFriends</h1>   \n          <CounterButton color={'red'}/>   \n          </div>\n          );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport CardList from '../component/CardList';\nimport SearchBox from '../component/SearchBox'\n//import { robots } from '../robots';\nimport './App.css'\nimport Scroll from '../component/Scroll';\nimport ErrorBoundry from '../component/ErrorBoundry'\nimport {setSearchField, requestRobots} from '../actions'\nimport {connect} from 'react-redux'\nimport Header from '../component/Header';\n\nconst mapStateToProps = state =>{\n    return{\n        searchField:state.searchRobots.searchField,\n        isPending:state.requestRobots.isPending,\n        robots:state.requestRobots.robots,\n        error:state.requestRobots.error\n    }\n}\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n           onSearchChange:(event)=> dispatch(setSearchField(event.target.value)),\n           onRequestRobots:() => dispatch(requestRobots())\n    }\n}\nclass App extends React.Component {\n\n    componentDidMount(){        \n      this.props.onRequestRobots();\n       \n    }\n\n    render(){\n        \n        const {searchField, onSearchChange, robots, isPending} = this.props;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        if(isPending){\n           return  <h1>Loading</h1>\n        }else{\n            return (\n                <div className='tc'> \n                  <Header/>\n                  <SearchBox searchChange={onSearchChange}/>\n                  <Scroll>\n                    <ErrorBoundry>\n                      <CardList robots={filteredRobots}/>\n                     </ErrorBoundry>\n                  </Scroll>                  \n                </div>\n              );\n        }\n\n    }\n\n\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {CHANGE_SEARCH_FIELD,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCESS,\n        REQUEST_ROBOTS_FAILED\n} from \"./constants.js\";\n\nexport const setSearchField = (text) => ({\n    type:CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () =>(dispatch) => {\n\n    dispatch({type:REQUEST_ROBOTS_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data =>dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}));\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS ='REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED ='REQUEST_ROBOTS_FAILED';\n","import {CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from \"./constants.js\";\n\nconst initialStateSearch ={\n    searchField:''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={})=>{\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n           return Object.assign({}, state,{searchField:action.payload})\n           //{...state,searchField:action.payload}\n         default:\n             return state;  \n    }\n}\n\nconst initialStateRobots ={\n    isPending:false,\n    robots:[],\n    error:''\n}\nexport const requestRobots = ( state = initialStateRobots, action={})=>{\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING :\n             return  Object.assign({}, state,{isPending:true})\n        case REQUEST_ROBOTS_SUCCESS :\n             return  Object.assign({}, state,{isPending:false, robots:action.payload})  \n        case REQUEST_ROBOTS_FAILED :            \n             return  Object.assign({}, state,{isPending:false, error:action.payload})   \n        default:\n             return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n//import {robots} from './robots';\n//import {Provider, connect} from 'react-redux';\nimport {Provider} from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport {searchRobots, requestRobots} from './reducers'\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\n\n\nReactDOM.render(\n     <Provider store={store}>\n        < App />  \n     </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}